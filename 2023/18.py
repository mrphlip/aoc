#!/usr/bin/python
dat = [
	("L", 7, 0x50a670),
	("U", 3, 0x1fa0d3),
	("R", 7, 0x50a672),
	("U", 3, 0x541033),
	("R", 3, 0x0578c0),
	("U", 2, 0x5c7e73),
	("R", 5, 0x5a82b2),
	("U", 2, 0x2ae371),
	("R", 2, 0x437782),
	("U", 7, 0x4855d1),
	("R", 3, 0x29e7b0),
	("U", 3, 0x102091),
	("R", 8, 0x29e7b2),
	("U", 5, 0x4e5061),
	("R", 6, 0x4edb52),
	("U", 5, 0x016b21),
	("R", 3, 0x015812),
	("U", 4, 0x1fd813),
	("R", 3, 0x536be2),
	("U", 4, 0x44a813),
	("R", 4, 0x2d8212),
	("D", 4, 0x1b24b3),
	("R", 6, 0x80edf0),
	("U", 4, 0x537083),
	("R", 7, 0x1354a2),
	("U", 4, 0x1981d3),
	("L", 7, 0x1e6dd0),
	("U", 7, 0x71f1a3),
	("L", 7, 0x4ec1f0),
	("U", 4, 0x1ba8e1),
	("L", 3, 0x4fb550),
	("U", 7, 0x1ba8e3),
	("L", 3, 0x449d20),
	("U", 3, 0x7396b3),
	("L", 3, 0x03cc40),
	("U", 9, 0x4d9f63),
	("L", 4, 0x403190),
	("U", 4, 0x55b431),
	("L", 4, 0x7c87d0),
	("U", 6, 0x55b433),
	("L", 5, 0x794210),
	("U", 3, 0x3e1253),
	("L", 5, 0x09b360),
	("U", 7, 0x43f1e3),
	("R", 2, 0x483122),
	("U", 2, 0x54eb23),
	("R", 8, 0x5bcc92),
	("U", 7, 0x54eb21),
	("L", 8, 0x17e4f2),
	("U", 3, 0x42ac63),
	("L", 3, 0x193032),
	("U", 9, 0x2ef693),
	("L", 4, 0x0882d2),
	("U", 7, 0x666f03),
	("L", 5, 0x621932),
	("U", 5, 0x2f0983),
	("L", 6, 0x484242),
	("U", 8, 0x52ae83),
	("R", 4, 0x691b02),
	("U", 3, 0x566e53),
	("R", 3, 0x146c02),
	("U", 3, 0x3e0143),
	("L", 4, 0x3b53a2),
	("U", 5, 0x3e0141),
	("R", 4, 0x5c72c2),
	("U", 6, 0x30b573),
	("R", 6, 0x20d452),
	("U", 4, 0x4c34f3),
	("L", 4, 0x29e4d2),
	("U", 2, 0x561d23),
	("L", 6, 0x06a4d2),
	("U", 5, 0x47d0e3),
	("L", 4, 0x06a4d0),
	("U", 7, 0x35af93),
	("L", 7, 0x536c30),
	("U", 6, 0x1a5e63),
	("L", 3, 0x3d7a90),
	("U", 4, 0x3a8e93),
	("R", 5, 0x38dd02),
	("U", 2, 0x53f2c3),
	("R", 3, 0x38dd00),
	("U", 7, 0x07f873),
	("L", 6, 0x123ce0),
	("D", 5, 0x185303),
	("L", 4, 0x123ce2),
	("U", 5, 0x88d233),
	("L", 5, 0x0573e0),
	("U", 4, 0x1553e3),
	("R", 5, 0x7cba60),
	("U", 5, 0x1d0651),
	("R", 5, 0x456210),
	("D", 5, 0x663221),
	("R", 5, 0x6db342),
	("U", 5, 0x09a481),
	("R", 7, 0x391602),
	("U", 2, 0x623721),
	("R", 4, 0x66cd80),
	("D", 5, 0x2ed251),
	("L", 3, 0x3ffbc0),
	("D", 5, 0x496ad1),
	("L", 5, 0x4fd1b0),
	("D", 3, 0x4d2a33),
	("R", 8, 0x8a8c72),
	("D", 7, 0x190cb3),
	("R", 5, 0x8a8c70),
	("U", 4, 0x37e653),
	("R", 2, 0x03cc42),
	("U", 2, 0x093813),
	("R", 8, 0x11f592),
	("D", 6, 0x0c1793),
	("R", 2, 0x331a62),
	("D", 3, 0x7e8663),
	("R", 2, 0x331a60),
	("D", 5, 0x3dc463),
	("R", 4, 0x11f590),
	("D", 8, 0x00cd73),
	("R", 3, 0x0578c2),
	("D", 6, 0x3308e3),
	("R", 2, 0x4240d2),
	("D", 6, 0x20a8c3),
	("R", 8, 0x7bad12),
	("D", 6, 0x3a5b43),
	("R", 7, 0x7bad10),
	("D", 4, 0x427073),
	("R", 2, 0x44a222),
	("D", 3, 0x101d03),
	("R", 3, 0x377c42),
	("D", 3, 0x0354a3),
	("R", 7, 0x0b84d2),
	("D", 5, 0x2e0e63),
	("R", 3, 0x0d8290),
	("U", 6, 0x11e101),
	("R", 6, 0x0a53c0),
	("U", 6, 0x05f3a1),
	("R", 8, 0x954140),
	("U", 7, 0x05f3a3),
	("R", 6, 0x0886d0),
	("U", 7, 0x11e103),
	("L", 4, 0x0cd500),
	("D", 4, 0x2d4003),
	("L", 7, 0x0770a0),
	("U", 4, 0x68d5d3),
	("L", 5, 0x673ed0),
	("U", 5, 0x4534c1),
	("L", 3, 0x5abb00),
	("U", 3, 0x59b393),
	("R", 8, 0x1c88c0),
	("U", 6, 0x201023),
	("R", 5, 0x1c88c2),
	("U", 4, 0x40baa3),
	("R", 6, 0x5c2a00),
	("U", 3, 0x0eaf31),
	("L", 9, 0x14b950),
	("U", 2, 0x2d66d1),
	("L", 5, 0x374f20),
	("U", 6, 0x63f451),
	("R", 5, 0x425580),
	("U", 3, 0x915b23),
	("L", 8, 0x22b090),
	("U", 3, 0x1a1eb1),
	("L", 3, 0x605dd0),
	("U", 3, 0x436ca1),
	("R", 4, 0x605dd2),
	("U", 2, 0x391de1),
	("R", 7, 0x34b032),
	("U", 3, 0x4f9461),
	("R", 3, 0x42e272),
	("D", 10, 0x4f9463),
	("R", 3, 0x397be2),
	("D", 4, 0x1525f1),
	("R", 3, 0x223690),
	("U", 6, 0x4011c1),
	("R", 6, 0x889b50),
	("U", 3, 0x3df001),
	("R", 2, 0x6339e0),
	("U", 10, 0x3960b1),
	("R", 3, 0x512ca2),
	("U", 3, 0x34fb81),
	("R", 3, 0x2c7252),
	("U", 3, 0x439321),
	("R", 8, 0x114aa2),
	("D", 6, 0x439323),
	("R", 4, 0x775fb2),
	("U", 3, 0x485ee1),
	("R", 5, 0x5a47a2),
	("U", 3, 0x438ea1),
	("R", 4, 0x645fe2),
	("U", 4, 0x16e2c1),
	("L", 9, 0x2ba360),
	("U", 3, 0x3c3ab1),
	("R", 5, 0x665090),
	("U", 4, 0x2d02f1),
	("R", 4, 0x77f862),
	("U", 4, 0x2ee831),
	("R", 4, 0x77f860),
	("U", 4, 0x5b3751),
	("R", 8, 0x6a49e0),
	("U", 3, 0x18f0e1),
	("R", 3, 0x526c50),
	("D", 4, 0x04f5e3),
	("R", 6, 0x6dec60),
	("D", 4, 0x35f3e3),
	("L", 6, 0x43fbb2),
	("D", 5, 0x6331a3),
	("R", 6, 0x379cf2),
	("D", 3, 0x027033),
	("R", 4, 0x7b98a0),
	("D", 4, 0x37cb13),
	("L", 10, 0x284e30),
	("D", 4, 0x0d88a3),
	("R", 6, 0x235de0),
	("D", 4, 0x036bd1),
	("R", 10, 0x261700),
	("D", 5, 0x084a61),
	("L", 10, 0x418f20),
	("D", 4, 0x3691a1),
	("L", 3, 0x48a0b2),
	("D", 5, 0x659431),
	("L", 5, 0x5ed822),
	("D", 3, 0x271d31),
	("L", 6, 0x2f94f0),
	("D", 4, 0x6c9e31),
	("R", 5, 0x245f00),
	("D", 3, 0x6c9e33),
	("R", 5, 0x5384e0),
	("D", 5, 0x16e611),
	("R", 4, 0x1d82a0),
	("D", 4, 0x119271),
	("R", 10, 0x28fd82),
	("D", 4, 0x157911),
	("R", 6, 0x10f222),
	("D", 6, 0x6e40f1),
	("R", 8, 0x67ca22),
	("D", 4, 0x765571),
	("R", 7, 0x2c1b32),
	("D", 6, 0x688273),
	("R", 4, 0x1528c2),
	("D", 4, 0x313071),
	("R", 4, 0x8d59c2),
	("D", 2, 0x313073),
	("R", 4, 0x2ff4c2),
	("D", 5, 0x2ace73),
	("R", 4, 0x121580),
	("D", 6, 0x34f3d3),
	("R", 8, 0x2b2000),
	("D", 2, 0x6793d1),
	("R", 4, 0x2392d0),
	("U", 10, 0x6793d3),
	("R", 2, 0x4b6220),
	("U", 3, 0x34f3d1),
	("R", 4, 0x264cd0),
	("D", 4, 0x514583),
	("R", 8, 0x5c3e92),
	("D", 4, 0x157913),
	("R", 7, 0x57ced2),
	("D", 5, 0x18f841),
	("L", 6, 0x461da2),
	("D", 6, 0x4ec1a1),
	("R", 5, 0x095502),
	("D", 3, 0x0ebcf1),
	("L", 5, 0x2a2272),
	("D", 5, 0x244651),
	("L", 3, 0x71c440),
	("U", 5, 0x668511),
	("L", 3, 0x7a9000),
	("U", 9, 0x0beed1),
	("L", 3, 0x1b08e0),
	("D", 4, 0x2d8921),
	("L", 6, 0x417c70),
	("D", 6, 0x5cddd1),
	("L", 4, 0x1d91f0),
	("D", 2, 0x197253),
	("L", 6, 0x2dfaf0),
	("U", 4, 0x5e52f3),
	("L", 5, 0x49c610),
	("D", 4, 0x12a1b3),
	("L", 6, 0x010560),
	("D", 7, 0x2d2261),
	("L", 3, 0x497340),
	("D", 5, 0x605203),
	("R", 8, 0x54bec0),
	("D", 6, 0x06a013),
	("R", 5, 0x3906c0),
	("D", 4, 0x0ff8d3),
	("R", 5, 0x1af980),
	("D", 5, 0x3aa013),
	("R", 4, 0x5dd070),
	("D", 4, 0x17dd93),
	("R", 3, 0x12a310),
	("D", 3, 0x58b503),
	("R", 5, 0x7974b0),
	("D", 5, 0x017993),
	("R", 10, 0x164140),
	("D", 2, 0x76b4f1),
	("R", 2, 0x16d420),
	("D", 4, 0x1c6501),
	("R", 5, 0x372640),
	("D", 4, 0x443043),
	("R", 3, 0x1cfd20),
	("D", 4, 0x4ee9b3),
	("L", 5, 0x4c6700),
	("D", 2, 0x0c0543),
	("L", 5, 0x181ac2),
	("D", 4, 0x88d2f3),
	("L", 6, 0x29e9e2),
	("D", 5, 0x64c913),
	("R", 6, 0x1c0fc2),
	("D", 5, 0x4acf11),
	("L", 5, 0x24ff82),
	("D", 2, 0x2fd931),
	("L", 8, 0x24ff80),
	("D", 3, 0x5b4781),
	("R", 8, 0x126682),
	("D", 3, 0x08fcf1),
	("R", 5, 0x67c7f2),
	("D", 3, 0x305da3),
	("R", 4, 0x1dc952),
	("U", 9, 0x7ceae3),
	("R", 3, 0x563052),
	("U", 7, 0x31a433),
	("R", 3, 0x0a1692),
	("D", 6, 0x64c911),
	("R", 6, 0x12d8c2),
	("U", 7, 0x8a0e13),
	("R", 4, 0x46b0e0),
	("U", 7, 0x2b0a93),
	("L", 4, 0x20fa80),
	("U", 7, 0x28f6e3),
	("R", 7, 0x461350),
	("D", 5, 0x4c1fd3),
	("R", 3, 0x6b3e20),
	("U", 4, 0x292251),
	("R", 10, 0x1b0850),
	("D", 4, 0x4bf461),
	("R", 3, 0x1d0be0),
	("D", 4, 0x17db83),
	("R", 4, 0x181ac0),
	("D", 4, 0x30a6f3),
	("L", 4, 0x2a9772),
	("D", 3, 0x4bbc33),
	("L", 2, 0x80f982),
	("D", 8, 0x4ba203),
	("L", 5, 0x220ed2),
	("D", 3, 0x087b53),
	("R", 7, 0x344050),
	("D", 2, 0x4c0d03),
	("R", 4, 0x41f2a0),
	("D", 6, 0x5c2063),
	("L", 6, 0x3bc480),
	("D", 4, 0x158943),
	("L", 5, 0x1db200),
	("D", 6, 0x18fc53),
	("L", 7, 0x4a0360),
	("D", 8, 0x311ef1),
	("R", 7, 0x3a22b0),
	("D", 5, 0x4a5151),
	("L", 2, 0x3a22b2),
	("D", 3, 0x2e6d41),
	("L", 6, 0x41bb30),
	("U", 3, 0x232a41),
	("L", 3, 0x6ec240),
	("U", 5, 0x511941),
	("L", 5, 0x6ec242),
	("U", 7, 0x363061),
	("L", 4, 0x4511d0),
	("U", 2, 0x168b51),
	("L", 3, 0x3aeb80),
	("D", 3, 0x374301),
	("L", 6, 0x579400),
	("D", 6, 0x67ce01),
	("L", 2, 0x579402),
	("D", 5, 0x005f91),
	("L", 5, 0x3aeb82),
	("D", 3, 0x04df11),
	("L", 6, 0x5d9ce0),
	("D", 8, 0x08f5e1),
	("L", 5, 0x025d90),
	("D", 9, 0x34c0e1),
	("L", 6, 0x3c9610),
	("D", 3, 0x268371),
	("L", 3, 0x260bf0),
	("D", 6, 0x5fc801),
	("L", 9, 0x260bf2),
	("D", 5, 0x63ab61),
	("R", 3, 0x323e30),
	("D", 3, 0x3add23),
	("R", 7, 0x71ebc0),
	("D", 2, 0x4cc683),
	("R", 6, 0x0280b0),
	("D", 5, 0x6dac93),
	("R", 7, 0x008fe0),
	("D", 5, 0x296783),
	("L", 2, 0x0ad620),
	("D", 6, 0x053061),
	("L", 3, 0x2bd160),
	("D", 4, 0x5bf611),
	("L", 4, 0x2bd162),
	("D", 3, 0x34e291),
	("L", 6, 0x4bcdc0),
	("U", 8, 0x1c7f13),
	("L", 3, 0x037ae2),
	("U", 7, 0x655393),
	("L", 3, 0x037ae0),
	("U", 6, 0x143663),
	("L", 5, 0x48a3e0),
	("U", 4, 0x375b51),
	("L", 3, 0x840400),
	("U", 4, 0x1e9851),
	("L", 4, 0x4acdd2),
	("U", 4, 0x2c3a41),
	("L", 9, 0x0b9ac2),
	("U", 2, 0x722f31),
	("L", 4, 0x5a0442),
	("U", 3, 0x52c881),
	("L", 6, 0x30cf12),
	("U", 5, 0x0284f1),
	("R", 6, 0x5cc4f0),
	("U", 4, 0x0a85a1),
	("L", 2, 0x58e770),
	("U", 5, 0x789781),
	("L", 9, 0x2b8f80),
	("U", 5, 0x573011),
	("R", 6, 0x50fc80),
	("D", 2, 0x001e61),
	("R", 6, 0x1ae3d2),
	("D", 5, 0x47e4c1),
	("R", 2, 0x585620),
	("D", 12, 0x0c3741),
	("R", 3, 0x5df250),
	("U", 6, 0x0c3743),
	("R", 2, 0x4ad760),
	("U", 4, 0x4f8f31),
	("R", 4, 0x2a38f2),
	("U", 5, 0x2a1eb1),
	("R", 2, 0x283ca2),
	("U", 4, 0x73cf71),
	("R", 3, 0x37aed2),
	("U", 2, 0x7daa03),
	("R", 8, 0x01f112),
	("U", 5, 0x204423),
	("L", 5, 0x42a8a2),
	("U", 7, 0x3f3f11),
	("R", 7, 0x3261c2),
	("U", 7, 0x335041),
	("L", 7, 0x47ae22),
	("U", 3, 0x104691),
	("L", 3, 0x48b6d0),
	("D", 7, 0x549a51),
	("L", 5, 0x58a090),
	("D", 10, 0x156ca1),
	("L", 4, 0x0e3a92),
	("U", 5, 0x4fd671),
	("L", 3, 0x4a5582),
	("U", 2, 0x4fd673),
	("L", 6, 0x48c752),
	("D", 7, 0x29d471),
	("L", 4, 0x47ae20),
	("D", 2, 0x2ad7a1),
	("L", 6, 0x470522),
	("U", 9, 0x418571),
	("L", 4, 0x470520),
	("U", 4, 0x5db3b1),
	("L", 2, 0x48f102),
	("U", 9, 0x08fd81),
	("R", 2, 0x6c1492),
	("U", 2, 0x3693a1),
	("R", 4, 0x38af72),
	("D", 7, 0x39a273),
	("R", 3, 0x2cc7a2),
	("D", 4, 0x39a271),
	("R", 8, 0x49d8e2),
	("U", 5, 0x1d3ea1),
	("R", 7, 0x4392d2),
	("U", 6, 0x582643),
	("R", 5, 0x7ebc12),
	("U", 8, 0x087aa3),
	("L", 7, 0x2f7a22),
	("U", 4, 0x049c73),
	("R", 9, 0x839c92),
	("U", 5, 0x217ad3),
	("L", 3, 0x006122),
	("U", 2, 0x4012a3),
	("L", 6, 0x83fdb0),
	("U", 5, 0x34d033),
	("L", 3, 0x2ebbe2),
	("D", 4, 0x012803),
	("L", 4, 0x0cada0),
	("D", 12, 0x52ad43),
	("L", 3, 0x7ac6f0),
	("U", 2, 0x139793),
	("L", 8, 0x787f80),
	("U", 6, 0x513903),
	("L", 4, 0x5c7680),
	("U", 8, 0x513901),
	("L", 4, 0x6bf510),
	("U", 3, 0x6644d1),
	("R", 8, 0x29ce50),
	("U", 6, 0x615913),
	("R", 9, 0x0b1f70),
	("U", 3, 0x3f34b3),
	("R", 9, 0x0b1f72),
	("U", 4, 0x53cc73),
	("R", 3, 0x488660),
	("U", 10, 0x0c24d3),
	("L", 4, 0x5bc192),
	("U", 10, 0x805113),
	("L", 4, 0x5bc190),
	("U", 10, 0x0ee083),
	("L", 3, 0x320da2),
	("D", 3, 0x08b7f3),
	("L", 3, 0x16a1d2),
	("D", 4, 0x554b63),
	("L", 8, 0x67d7b2),
	("D", 3, 0x1c9e53),
	("R", 11, 0x7d6172),
	("D", 5, 0x355403),
	("L", 4, 0x3474c2),
	("D", 5, 0x355401),
	("L", 6, 0x036082),
	("U", 6, 0x1ca5f3),
	("L", 4, 0x5044c2),
	("U", 3, 0x496ef3),
	("L", 4, 0x352ca2),
	("U", 8, 0x59f1d3),
	("R", 4, 0x0abb22),
	("U", 4, 0x329573),
	("L", 11, 0x112f50),
	("D", 5, 0x323853),
	("R", 4, 0x112f52),
	("D", 4, 0x4c4073),
	("L", 10, 0x139af2),
	("D", 5, 0x4e7131),
	("L", 9, 0x408c52),
	("D", 6, 0x17dfb1),
	("R", 4, 0x551602),
	("D", 4, 0x156041),
	("R", 5, 0x7b4e32),
	("D", 5, 0x499c31),
	("R", 6, 0x3c5700),
	("D", 4, 0x1b3c31),
	("R", 4, 0x5641f0),
	("D", 3, 0x366c31),
	("L", 4, 0x0da900),
	("D", 5, 0x0e2d71),
	("L", 6, 0x1cb300),
	("D", 9, 0x7d5e11),
	("L", 4, 0x53fb90),
	("U", 9, 0x407d61),
	("L", 3, 0x312f12),
	("D", 4, 0x3fda43),
	("L", 3, 0x18df32),
	("D", 4, 0x65cbf1),
	("L", 4, 0x340082),
	("D", 5, 0x329ec1),
	("L", 4, 0x192142),
	("D", 3, 0x2d5321),
	("L", 4, 0x2c8282),
	("D", 7, 0x097491),
	("R", 4, 0x2cc1a0),
	("D", 9, 0x8fbe61),
	("R", 4, 0x2cc1a2),
	("D", 5, 0x096481),
	("R", 9, 0x1e91f2),
	("D", 2, 0x1c4581),
	("R", 4, 0x490aa2),
	("D", 8, 0x23cee1),
	("L", 8, 0x15e462),
	("D", 2, 0x681e91),
	("L", 7, 0x149bf2),
	("D", 9, 0x29f031),
	("L", 6, 0x14b242),
	("D", 4, 0x4a2343),
	("L", 12, 0x02f462),
	("D", 3, 0x530e63),
	("L", 4, 0x4c9572),
	("D", 5, 0x267ed1),
	("R", 4, 0x361b42),
	("D", 6, 0x76b2d1),
	("R", 4, 0x2a3662),
	("U", 6, 0x49adf1),
	("R", 6, 0x15ba52),
	("D", 3, 0x2a9b91),
	("R", 6, 0x074c82),
	("D", 5, 0x5b72d1),
	("L", 2, 0x7ee4b2),
	("D", 9, 0x089be1),
	("L", 6, 0x043782),
	("D", 7, 0x379f11),
	("L", 4, 0x047c52),
	("D", 2, 0x5bf271),
	("L", 4, 0x57a872),
	("D", 8, 0x03b241),
	("L", 4, 0x0fa572),
	("D", 3, 0x03b243),
	("L", 11, 0x4ef3c2),
	("D", 2, 0x148571),
	("L", 5, 0x1adb52),
	("D", 2, 0x4dea51),
	("L", 4, 0x7e4862),
	("D", 11, 0x371183),
	("L", 5, 0x419352),
	("U", 11, 0x55b843),
	("L", 4, 0x6688d2),
	("D", 5, 0x47fc03),
	("L", 8, 0x23d5b2),
	("U", 4, 0x244833),
	("L", 8, 0x6099a2),
	("U", 4, 0x462b53),
	("L", 2, 0x522262),
	("U", 6, 0x447301),
	("L", 7, 0x41a170),
	("U", 6, 0x6d92a1),
	("L", 2, 0x41a172),
	("U", 3, 0x1eed11),
	("L", 6, 0x0a4ce2),
	("U", 7, 0x6e4691),
	("L", 5, 0x3e9242),
	("U", 5, 0x244da1),
	("L", 3, 0x0ab7d2),
	("U", 2, 0x597671),
	("L", 9, 0x5dfdf2),
	("U", 7, 0x4a3e01),
	("L", 3, 0x5fd8a2),
	("U", 6, 0x54d6b3),
]

#dat = [("R", 6, 0x70c710),("D", 5, 0x0dc571),("L", 2, 0x5713f0),("D", 2, 0xd2c081),("R", 2, 0x59c680),("D", 2, 0x411b91),("L", 5, 0x8ceee2),("U", 2, 0xcaa173),("L", 1, 0x1b58a2),("U", 2, 0xcaa171),("R", 2, 0x7807d2),("U", 3, 0xa77fa3),("L", 2, 0x015232),("U", 2, 0x7a21e3),]

dirs = {
	'U': (0,-1),
	'D': (0,1),
	'L': (-1,0),
	'R': (1,0),
}

border = {}
isup = set()
x = y = 0
for d, l, c in dat:
	border[x,y] = c
	dx, dy = dirs[d]
	for i in range(l):
		if dy < 0:
			isup.add((x,y))
		x += dx
		y += dy
		border[x,y] = c
		if dy > 0:
			isup.add((x,y))
minx = min(x for x,y in border)
maxx = max(x for x,y in border) + 1
miny = min(y for x,y in border)
maxy = max(y for x,y in border) + 1
grid = []
count = 0
for y in range(miny, maxy):
	row = []
	i = False
	for x in range(minx, maxx):
		if (x,y) in border:
			row.append(True)
			count += 1
			if (x,y) in isup:
				i = not i
		else:
			row.append(i)
			count += i
	grid.append(row)
print(count)

path = []
ys = {0}
x = y = 0
for d, l, c in dat:
	prevx, prevy = x, y
	d = "RDLU"[c & 0xF]
	l = c >> 4
	dx, dy = dirs[d]
	x += dx * l
	y += dy * l
	path.append((prevx, prevy, x,y))
	ys.add(y)
ys = list(sorted(ys))
def score_row(verts, horizs):
	xs = verts + [i[0] for i in horizs] + [i[1] for i in horizs]
	xs = list(sorted(set(xs)))
	n = len(xs)
	i = False
	for x1, x2 in zip(xs[:-1], xs[1:]):
		if x2 == x1 + 1:
			continue
		x = x1 + 1
		if x1 in verts:
			i = not i
		if any(xa < x < xb for xa,xb in horizs) or i:
			n += x2-x1-1
	return n
# first, count up the boundary lines
count = 0
for y in ys:
	verts = [x for x,y1,_,y2 in path if y1 <= y < y2 or y2 <= y < y1]
	horizs = [(min(x1, x2),max(x1,x2)) for x1,y1,x2,_ in path if y1 == y]
	count += score_row(verts, horizs)
# now count up the inbetweens
for y1, y2 in zip(ys[:-1],ys[1:]):
	if y2 == y1 + 1:
		continue
	verts = [x for x,ya,_,yb in path if ya <= y1+1 < yb or yb <= y1+1 < ya]
	count += (y2 - y1 - 1) * score_row(verts, [])
print(count)
